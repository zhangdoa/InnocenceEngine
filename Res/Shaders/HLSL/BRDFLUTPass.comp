// ============================================================================
// BRDF LUT Preintegration Shader using the Split-Sum Method
//
// This shader precomputes a lookup table (LUT) for specular image-based
// lighting (IBL) by integrating the microfacet BRDF over the hemisphere.
// The split-sum method factors the BRDF integration into two parts:
//
//     Specular ≈ A + B * F
//
// where F is the Fresnel term (computed cheaply at runtime), and A and B
// are pre-integrated values that have “baked in” the microfacet distribution
// and geometric shadowing/masking (D and G terms). This saves expensive per-
// pixel integration during real-time rendering.
// ============================================================================

#include "common/common.hlsl"

// ----------------------------------------------------------------------------
// Function: RadicalInverse_VdC
//
// Computes the radical inverse of an integer using bitwise operations (the
// Van der Corput sequence in base 2). This provides a low-discrepancy number
// in [0,1) that is used for sample stratification in Monte Carlo integration.
// ----------------------------------------------------------------------------
float RadicalInverse_VdC(uint bits)
{
	// Reverse the bits (32-bit reversal) to create the low-discrepancy sequence.
	bits = (bits << 16u) | (bits >> 16u);
	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	// Scale down to the range [0, 1)
	return float(bits) * 2.3283064365386963e-10; // 2^-32
}

// ----------------------------------------------------------------------------
// Function: Hammersley
//
// Generates a 2D Hammersley point using the radical inverse. The first
// component is a simple fraction i/N, and the second is the radical inverse of i.
// These points provide well-distributed samples for Monte Carlo integration.
// ----------------------------------------------------------------------------
float2 Hammersley(uint i, uint N)
{
	return float2(float(i) / float(N), RadicalInverse_VdC(i));
}

// ----------------------------------------------------------------------------
// Function: ImportanceSampleGGX
//
// Generates an importance-sampled half-vector H for a given 2D sample Xi,
// using the GGX (Trowbridge-Reitz) normal distribution. This is used to sample
// directions on the hemisphere weighted according to the microfacet distribution.
// - N: Surface normal
// - roughness: Surface roughness parameter controls the spread of the distribution
// ----------------------------------------------------------------------------
float3 ImportanceSampleGGX(float2 Xi, float3 N, float roughness)
{
	float a = roughness * roughness;

	// Map uniform random numbers to spherical coordinates.
	// phi is uniformly distributed in [0, 2π)
	float phi = 2.0 * PI * Xi.x;
	// cosTheta is derived from the inversion of the GGX distribution CDF.
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

	// Convert spherical coordinates (phi, theta) to Cartesian coordinates.
	float3 H;
	H.x = cos(phi) * sinTheta;
	H.y = sin(phi) * sinTheta;
	H.z = cosTheta;

	// Transform H from tangent space to world space.
	// Build an orthonormal basis (tangent, bitangent, normal).
	float3 up = abs(N.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
	float3 tangent = normalize(cross(up, N));
	float3 bitangent = cross(N, tangent);

	float3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
	return normalize(sampleVec);
}

// ----------------------------------------------------------------------------
// Function: D_GGX
//
// Evaluates the GGX normal distribution function (NDF) given NdotH and roughness.
// The NDF describes how microfacets are statistically distributed on the surface.
// Note: We omit an explicit π factor because the integration setup later absorbs it.
// ----------------------------------------------------------------------------
float D_GGX(float NdotH, float roughness)
{
	float a = roughness * roughness;
	float a2 = a * a;
	float f = (NdotH * NdotH) * (a2 - 1.0) + 1.0;
	return a2 / (f * f);
}

// ----------------------------------------------------------------------------
// Function: G_SchlickGGX
//
// Approximates the geometry (shadowing/masking) term for a single direction using
// Schlick's method. It accounts for the reduction in microfacet visibility at grazing angles.
// ----------------------------------------------------------------------------
float G_SchlickGGX(float NdotV, float roughness)
{
	float a = roughness;
	float k = (a * a) / 2.0; // k is modified for IBL.
	return NdotV / (NdotV * (1.0 - k) + k);
}

// ----------------------------------------------------------------------------
// Function: G_Smith
//
// Computes the combined geometry term (G) using the Smith method. This function
// takes into account both the view (V) and light (L) directions.
// ----------------------------------------------------------------------------
float G_Smith(float3 N, float3 V, float3 L, float roughness)
{
	float NdotV = max(dot(N, V), 0.0);
	float NdotL = max(dot(N, L), 0.0);
	float ggx2 = G_SchlickGGX(NdotV, roughness);
	float ggx1 = G_SchlickGGX(NdotL, roughness);
	return ggx1 * ggx2;
}

// ----------------------------------------------------------------------------
// Function: V_SmithGGXCorrelated
//
// Computes a correlated geometry term for an additional correction (used for
// approximating multiple scattering effects). This term averages over the
// combined contributions of NdotL and NdotV.
// ----------------------------------------------------------------------------
float V_SmithGGXCorrelated(float NdotL, float NdotV, float alphaG)
{
	float alphaG2 = alphaG * alphaG;
	float Lambda_GGXV = NdotL * sqrt(NdotV * NdotV * (1.0 - alphaG2) + alphaG2);
	float Lambda_GGXL = NdotV * sqrt(NdotL * NdotL * (1.0 - alphaG2) + alphaG2);
	return 0.5 / max((Lambda_GGXV + Lambda_GGXL), 0.00001);
}

// ----------------------------------------------------------------------------
// Function: IntegrateBRDF
//
// This is the core function that performs the split-sum Monte Carlo integration.
// For a given view angle (represented by NdotV) and roughness value, it integrates
// the microfacet BRDF over the hemisphere. The integration is split into two parts:
//   - A: weighted by (1 - Fresnel)
//   - B: weighted by Fresnel (approximated via Schlick's formula)
// An additional term (RsF1) is computed to help approximate multiple scattering.
// ----------------------------------------------------------------------------
float4 IntegrateBRDF(float NdotV, float roughness)
{
	// Construct the view vector (V) in tangent space.
	// We assume the surface normal (N) is (0, 0, 1). Here, V lies in the x-z plane.
	float3 V;
	V.x = sqrt(1.0 - NdotV * NdotV); // sine component of the view angle
	V.y = 0.0;
	V.z = NdotV; // cosine component

	// Accumulators for the two split parts of the integration.
	float A = 0.0; // Accumulates contribution weighted by (1 - Fresnel)
	float B = 0.0; // Accumulates contribution weighted by Fresnel
	float RsF1 = 0.0; // Additional term for multiple scattering correction

	// The surface normal in tangent space.
	float3 N = float3(0.0, 0.0, 1.0);

	const uint SAMPLE_COUNT = 1024u; // Number of Monte Carlo samples

	// ------------------------------------------------------------------------
	// Monte Carlo Integration Loop
	// ------------------------------------------------------------------------
	for (uint i = 0u; i < SAMPLE_COUNT; ++i)
	{
		// Generate a low-discrepancy sample using the Hammersley sequence.
		float2 Xi = Hammersley(i, SAMPLE_COUNT);

		// Obtain an importance-sampled half-vector (H) using the GGX distribution.
		float3 H = ImportanceSampleGGX(Xi, N, roughness);

		// Compute the light direction (L) by reflecting the view vector about H.
		// This is derived from the half-vector reflection relation.
		float3 L = normalize(2.0 * dot(V, H) * H - V);

		// Compute the cosine terms for various angles.
		float NdotL = saturate(L.z); // Cosine between surface normal and light direction
		float NdotH = saturate(H.z); // Cosine between surface normal and half-vector
		float VdotH = saturate(dot(V, H)); // Cosine between view vector and half-vector

		// Only consider samples where the light is above the surface.
		if (NdotL > 0.0)
		{
			// Compute the geometry term (G) using the Smith method.
			float G = G_Smith(N, V, L, roughness);
			// V_contrib is the sample's contribution after converting from half-vector
			// measure to the light measure (includes normalization factors).
			float V_contrib = G * VdotH / (NdotH * NdotV);

			// Schlick's approximation for Fresnel:
			// F ≈ 1 + (F0 - 1) * (1 - VdotH)^5. Here we assume F0 is 1 to split the integration.
			float Fc = pow(1.0 - VdotH, 5.0);

			// Split the contribution into two parts:
			// - (1 - Fc) contributes to A.
			// - Fc contributes to B.
			A += (1.0 - Fc) * V_contrib;
			B += Fc * V_contrib;
		}
	}

	// ------------------------------------------------------------------------
	// Additional Integration for Multiple-Scattering Correction (RsF1)
	// ------------------------------------------------------------------------
	// This loop approximates the cosine-weighted average of an extra term (RsF1)
	// over the hemisphere. It is used to account for energy redistribution due
	// to multiple bounces (see Real-Time Rendering, 4th ed., section on multiple-bounce).
	for (uint i = 0u; i < SAMPLE_COUNT; ++i)
	{
		// We use a discretized cosine value over the hemisphere.
		float NdotL = float(i) / float(SAMPLE_COUNT);
		// Approximate the half-angle cosine as the average of NdotL and NdotV.
		float NdotH = (NdotL + NdotV) / 2.0;

		// Compute the GGX distribution function.
		float D = D_GGX(NdotH, roughness);
		// Compute a correlated geometry term.
		float V_geom = V_SmithGGXCorrelated(NdotL, NdotV, roughness);
		RsF1 += D * V_geom * NdotL;
	}

	// Average the contributions over all samples.
	A /= float(SAMPLE_COUNT);
	B /= float(SAMPLE_COUNT);
	RsF1 /= float(SAMPLE_COUNT);

	// The final LUT will store A, B, and RsF1 (the fourth channel is set to 1.0).
	return float4(A, B, RsF1, 1.0);
}

// ----------------------------------------------------------------------------
// Compute Shader Entry Point
//
// Each thread corresponds to one texel in the output BRDF LUT. The x-coordinate
// maps to NdotV (view cosine) and the y-coordinate maps to roughness.
// ----------------------------------------------------------------------------

// Structure containing information about the current thread's dispatch position.
struct ComputeInputType
{
	uint3 groupID : SV_GroupID; // Thread group ID.
	uint3 groupThreadID : SV_GroupThreadID; // Local thread ID within a group.
	uint3 dispatchThreadID : SV_DispatchThreadID; // Global thread ID.
	uint  groupIndex : SV_GroupIndex; // Flattened local index.
};

// Output LUT texture bound at register u0.
[[vk::binding(0, 0)]]
RWTexture2D<float4> out_BRDFLUT : register(u0);

// Main compute shader function.
// The LUT resolution is assumed to be 512x512, so we normalize the thread ID accordingly.
[numthreads(16, 16, 1)]
void main(ComputeInputType input)
{
	// Map the dispatch thread ID to the LUT coordinates.
	// Adding 0.5 centers the sample within each texel.
	float NdotV = ((float)input.dispatchThreadID.x + 0.5) / 512.0;  // View angle cosine.
	float roughness = ((float)input.dispatchThreadID.y + 0.5) / 512.0; // Surface roughness.

	// Compute the integrated BRDF values using the split-sum method.
	float4 integratedBRDF = IntegrateBRDF(NdotV, roughness);

	// Write the result into the output texture.
	out_BRDFLUT[input.dispatchThreadID.xy] = integratedBRDF;
}

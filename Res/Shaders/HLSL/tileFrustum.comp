// shadertype=hlsl
#include "common/common.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

[[vk::binding(0, 0)]]
cbuffer PerFrameConstantBuffer : register(b0)
{
	PerFrame_CB g_Frame;
}

[[vk::binding(1, 0)]]
cbuffer PerFrameConstantBuffer : register(b1)
{
	DispatchParams_CB g_DispatchParams[NUM_DISPATCH_PARAMS];
}

[[vk::binding(0, 1)]]
RWStructuredBuffer<Frustum> out_Frustums : register(u0);

[numthreads(LIGHT_CULLING_BLOCK_SIZE, LIGHT_CULLING_BLOCK_SIZE, 1)]
void main(ComputeInputType input)
{
	// Compute the 4 corner points on the far clipping plane to use as the
	// frustum vertices.
	float4 screenSpace[4];

	// Top left point
	screenSpace[0] = float4(input.dispatchThreadID.xy * LIGHT_CULLING_BLOCK_SIZE, -1.0f, 1.0f);

	// Top right point
	screenSpace[1] = float4(float2(input.dispatchThreadID.x + 1, input.dispatchThreadID.y) * LIGHT_CULLING_BLOCK_SIZE, -1.0f, 1.0f);

	// Bottom left point
	screenSpace[2] = float4(float2(input.dispatchThreadID.x, input.dispatchThreadID.y + 1) * LIGHT_CULLING_BLOCK_SIZE, -1.0f, 1.0f);

	// Bottom right point
	screenSpace[3] = float4(float2(input.dispatchThreadID.x + 1, input.dispatchThreadID.y + 1) * LIGHT_CULLING_BLOCK_SIZE, -1.0f, 1.0f);

	float3 viewSpace[4];
	// Convert the screen space points to view space
	for (int i = 0; i < 4; i++)
	{
		viewSpace[i] = ScreenToView(screenSpace[i], g_Frame.viewportSize.xy, g_Frame.p_inv).xyz;
	}

	// Build the frustum planes from the view space points
	Frustum frustum;

	// View space eye position is always at the origin.
	const float3 eyePos = float3(0, 0, 0);

	// Left plane
	frustum.planes[0] = ComputePlane(eyePos, viewSpace[2], viewSpace[0]);
	// Right plane
	frustum.planes[1] = ComputePlane(eyePos, viewSpace[1], viewSpace[3]);
	// Top plane
	frustum.planes[2] = ComputePlane(eyePos, viewSpace[0], viewSpace[1]);
	// Bottom plane
	frustum.planes[3] = ComputePlane(eyePos, viewSpace[3], viewSpace[2]);

	// Store the computed frustum in global memory (if our thread ID is in bounds of the grid).
	uint4 numThreads = g_DispatchParams[0].numThreads;
	if (input.dispatchThreadID.x < numThreads.x && input.dispatchThreadID.y < numThreads.y)
	{
		uint flattenedIndex = input.dispatchThreadID.x + (input.dispatchThreadID.y * numThreads.x);
		out_Frustums[flattenedIndex] = frustum;
	}
}
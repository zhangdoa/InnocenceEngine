// shadertype=hlsl
#include "common/common.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

[[vk::binding(0, 1)]]
RWStructuredBuffer<uint> in_geometryProcessResult : register(u0);
[[vk::binding(1, 1)]]
RWTexture3D<float4> out_luminanceVolume : register(u1);
[[vk::binding(2, 1)]]
RWTexture3D<float4> out_normalVolume : register(u2);

[numthreads(8, 8, 8)]
void main(ComputeInputType input)
{
	out_luminanceVolume[input.dispatchThreadID] = float4(0.0f, 0.0f, 0.0f, 0.0f);
	out_normalVolume[input.dispatchThreadID] = float4(0.0f, 0.0f, 0.0f, 0.0f);

	int index = input.dispatchThreadID.x + input.dispatchThreadID.y * voxelizationPassCBuffer.volumeResolution + input.dispatchThreadID.z * voxelizationPassCBuffer.volumeResolution * voxelizationPassCBuffer.volumeResolution;

	// @TODO: optimize
	int offset = voxelizationPassCBuffer.volumeResolution * voxelizationPassCBuffer.volumeResolution * voxelizationPassCBuffer.volumeResolution;

	if (in_geometryProcessResult[index])
	{
		out_luminanceVolume[input.dispatchThreadID] = DecodeColor(in_geometryProcessResult[index]);
		out_normalVolume[input.dispatchThreadID] = DecodeNormal(in_geometryProcessResult[index + offset]);
	}
}
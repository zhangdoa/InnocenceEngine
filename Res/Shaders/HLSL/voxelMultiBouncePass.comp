// shadertype=hlsl
#include "common/coneTrace.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

[[vk::binding(0, 1)]]
Texture3D<float4> in_luminanceVolume : register(t0);
[[vk::binding(1, 1)]]
Texture3D<float4> in_normalVolume : register(t1);
[[vk::binding(0, 2)]]
RWTexture3D<float4> out_luminanceVolume : register(u0);
[[vk::binding(0, 3)]]
SamplerState SamplerTypePoint : register(s0);

[numthreads(8, 8, 8)]
void main(ComputeInputType input)
{
	out_luminanceVolume[input.dispatchThreadID] = float4(0.0f, 0.0f, 0.0f, 0.0f);

	float3 posWS = float3(input.dispatchThreadID);
	posWS *= voxelizationPassCBuffer.volumeResolutionRcp;
	posWS = posWS * 2.0 - 1.0;

	posWS *= (voxelizationPassCBuffer.volumeExtend / 2.0);
	posWS += voxelizationPassCBuffer.voxelSize / 2.0;
	posWS += voxelizationPassCBuffer.volumeCenter.xyz;

	float4 normalWS = in_normalVolume[input.dispatchThreadID];
	if (normalWS.a == 0.0f)
	{
		normalWS.xyz = float3(0.0, 1.0, 0.0);
	}

	float4 indirectDiffuse = ConeTraceRadianceDiffuse(in_luminanceVolume, SamplerTypePoint, posWS, normalWS.xyz, voxelizationPassCBuffer);
	//float4 indirectSpecular = ConeTraceRadianceSpecular(in_IrradianceVolume, SamplerTypePoint, posWS, normalWS.xyz, V, voxelizationPassCBuffer);

	out_luminanceVolume[input.dispatchThreadID] = indirectDiffuse + in_luminanceVolume[input.dispatchThreadID];
}
// shadertype=hlsl
#include "common/common.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

[[vk::binding(0, 1)]]
Texture2D<float4> in_pos : register(t0);
[[vk::binding(1, 1)]]
Texture2D<float4> in_lightPassResult : register(t1);
[[vk::binding(0, 2)]]
RWTexture3D<float4> out_luminanceVolume : register(u0);

[numthreads(8, 8, 1)]
void main(ComputeInputType input)
{
	int2 texCoord = input.dispatchThreadID.xy;

	float3 posWS = in_pos[texCoord].xyz;
	posWS -= voxelizationPassCBuffer.volumeCenter.xyz;
	posWS -= voxelizationPassCBuffer.voxelSize / 2.0;
	posWS /= (voxelizationPassCBuffer.volumeExtend / 2.0);
	posWS = posWS * 0.5 + 0.5;

	int is_saturated = (posWS.x > 1.0) || (posWS.y > 1.0) || (posWS.z > 1.0) || (posWS.x < 0.0) || (posWS.y < 0.0) || (posWS.z < 0.0);

	posWS *= voxelizationPassCBuffer.volumeResolution;
	int3 writeCoord = int3(posWS);

	if (!is_saturated)
	{
		float4 lightPassResult = in_lightPassResult[texCoord];
		out_luminanceVolume[writeCoord] = lightPassResult;
	}
}
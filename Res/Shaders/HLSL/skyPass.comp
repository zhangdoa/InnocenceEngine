// shadertype=hlsl
#include "common/common.hlsl"
#include "common/skyResolver.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

[[vk::binding(0, 0)]]
cbuffer PerFrameConstantBuffer : register(b0)
{
	PerFrame_CB g_Frame; // Contains view, projection, and other per-frame matrices.
}

[[vk::binding(0, 1)]]
RWTexture2D<float4> out_skyPassRT0 : register(u0);

[numthreads(8, 8, 1)]
void main(ComputeInputType input)
{
	float3 color = float3(0.0, 0.0, 0.0);

	float3 eyedir = get_world_normal(input.dispatchThreadID.xy, g_Frame.viewportSize.xy, g_Frame.p_inv, g_Frame.v_inv);
	float3 lightdir = -g_Frame.sun_direction.xyz;
	float planetRadius = 6371e3;
	float atmosphereHeight = 100e3;
	float3 eye_position = g_Frame.camera_posWS.xyz + float3(0.0, planetRadius, 0.0);

	color = atmosphere(
		eyedir, // normalized ray direction
		eye_position, // ray origin
		lightdir, // position of the sun
		g_Frame.sun_illuminance.xyz, // intensity of the sun
		planetRadius, // radius of the planet in meters
		planetRadius + atmosphereHeight, // radius of the atmosphere in meters
		float3(5.8e-6, 13.5e-6, 33.1e-6), // Rayleigh scattering coefficient
		21e-6, // Mie scattering coefficient
		8e3, // Rayleigh scale height
		1.3e3, // Mie scale height
		0.758 // Mie preferred scattering direction
	);

	int2 writeCoord = input.dispatchThreadID.xy;
	writeCoord.y = g_Frame.viewportSize.y - writeCoord.y;

	out_skyPassRT0[writeCoord] = float4(color, 1.0);
}
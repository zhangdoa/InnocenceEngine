// shadertype=hlsl
#include "common/common.hlsl"
#define AUTO_EXPOSURE

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

[[vk::binding(0, 0)]]
cbuffer PerFrameConstantBuffer : register(b0)
{
    PerFrame_CB g_Frame;
}

[[vk::binding(0, 1)]]
Texture2D in_basePassRT0 : register(t0);
[[vk::binding(1, 1)]]
Texture2D in_billboardPassRT0 : register(t1);
[[vk::binding(2, 1)]]
Texture2D in_debugPassRT0 : register(t2);
[[vk::binding(3, 1)]]
StructuredBuffer<float> in_luminanceAverage : register(t3);
[[vk::binding(0, 2)]]
RWTexture2D<float4> out_finalBlendPassRT0 : register(u0);

[numthreads(8, 8, 1)]
void main(ComputeInputType input)
{
	float3 basePass = in_basePassRT0[input.dispatchThreadID.xy].xyz;
	float4 billboardPass = in_billboardPassRT0[input.dispatchThreadID.xy];
	float4 debugPass = in_debugPassRT0[input.dispatchThreadID.xy];

	// HDR to LDR
#ifdef AUTO_EXPOSURE
	float EV100 = ComputeEV100FromAvgLuminance(in_luminanceAverage[0]);
#else
	float EV100 = ComputeEV100(g_Frame.aperture, g_Frame.shutterTime, g_Frame.ISO);
#endif
	float exposure = ConvertEV100ToExposure(EV100);

	float3 bassPassxyY = RGB_XYY(basePass);
	bassPassxyY.z *= exposure;

	basePass = XYY_RGB(bassPassxyY);

	// Tone Mapping
	float3 finalColor = TonemapACES(basePass);

	// Gamma Correction
	finalColor = AccurateLinearToSRGB(finalColor);

	// billboard overlay
	finalColor += billboardPass.rgb;

	// debug overlay
	if (debugPass.a == 1.0)
	{
		finalColor = debugPass.rgb;
	}

	out_finalBlendPassRT0[input.dispatchThreadID.xy] = float4(finalColor, 1.0f);
}
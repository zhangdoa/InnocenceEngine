// shadertype=hlsl
#include "common/common.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

[[vk::binding(0, 0)]]
RWTexture3D<float4> in_skyRadiance : register(u0);
[[vk::binding(1, 0)]]
RWStructuredBuffer<float4> out_skyIrradiance : register(u1);

[numthreads(8, 8, 8)]
void main(ComputeInputType input)
{
	if (input.dispatchThreadID.x < 6)
	{
		float3 color = float3(0.0, 0.0, 0.0);

		for (int i = 0; i < 8; i++)
		{
			for (int j = 0; j < 8; j++)
			{
				color += in_skyRadiance[int3(i, j, input.dispatchThreadID.x)].rgb;
			}
		}

		color /= 32.0;

		out_skyIrradiance[input.dispatchThreadID.x] = float4(color, 1.0);
	}
}
// shadertype=hlsl
#include "common/common.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

[[vk::binding(0, 1)]]
RWStructuredBuffer<Surfel> in_surfels : register(u0);
[[vk::binding(1, 1)]]
RWStructuredBuffer<float4> out_irradiance : register(u1);
[[vk::binding(0, 2)]]
Texture2DArray<float4> in_shadowMap : register(t0);

#include "common/BSDF.hlsl"

#define COOK_TORRANCE

float SunShadowResolver(float3 fragPos)
{
	float shadow = 0.0;

	int splitIndex = NR_CSM_SPLITS;
	for (int i = 0; i < NR_CSM_SPLITS; i++)
	{
		if (fragPos.x >= CSMs[i].AABBMin.x &&
			fragPos.y >= CSMs[i].AABBMin.y &&
			fragPos.z >= CSMs[i].AABBMin.z &&
			fragPos.x <= CSMs[i].AABBMax.x &&
			fragPos.y <= CSMs[i].AABBMax.y &&
			fragPos.z <= CSMs[i].AABBMax.z)
		{
			splitIndex = i;
			break;
		}
	}

	if (splitIndex == NR_CSM_SPLITS)
	{
		shadow = 0.0;
	}
	else
	{
		float4 lightSpacePos = mul(float4(fragPos, 1.0f), CSMs[splitIndex].v);
		lightSpacePos = mul(lightSpacePos, CSMs[splitIndex].p);
		lightSpacePos = lightSpacePos / lightSpacePos.w;
		float3 projCoords = lightSpacePos.xyz;

		// transform to [0,1] range
		projCoords = projCoords * 0.5 + 0.5;
		projCoords.y = 1.0 - projCoords.y;
		// get depth of current fragment from light's perspective
		float currentDepth = projCoords.z;

		float4 shadowMapValue = in_shadowMap[float3(projCoords.xy * 2048, splitIndex)];

		shadow = currentDepth > shadowMapValue.x ? 1.0 : 0.0;
	}

	return shadow;
}

[numthreads(8, 8, 8)]
void main(ComputeInputType input)
{
	if (input.dispatchThreadID.x < dispatchParams[2].numThreads.x
		&& input.dispatchThreadID.y < dispatchParams[2].numThreads.y
		&& input.dispatchThreadID.z < dispatchParams[2].numThreads.z)
	{
		uint l_surfelIndex = input.dispatchThreadID.x + (input.dispatchThreadID.y * dispatchParams[2].numThreads.x) + (input.dispatchThreadID.z * dispatchParams[2].numThreads.x * dispatchParams[2].numThreads.y);

		if (l_surfelIndex < GICBuffer.workload.x)
		{
			Surfel l_surfel = in_surfels[l_surfelIndex];

			float3 posWS = l_surfel.pos.xyz;
			float3 normalWS = l_surfel.normal.xyz;
			float3 albedo = l_surfel.albedo.xyz;

			float3 N = normalize(normalWS);
			float3 V = normalize(perFrameCBuffer.camera_posWS.xyz - posWS);
			float3 L = normalize(-perFrameCBuffer.sun_direction.xyz);

			float NdotL = max(dot(N, L), 0.0);

			float3 BRDF;

#ifdef COOK_TORRANCE
			float metallic = l_surfel.MRAT.x;
			float roughness = l_surfel.MRAT.y;

			float3 F0 = float3(0.04, 0.04, 0.04);
			F0 = lerp(F0, albedo, metallic);

			float NdotV = max(dot(N, V), 0.0);
			float3 H = normalize(V + L);
			float LdotH = max(dot(L, H), 0.0);
			float NdotH = max(dot(N, H), 0.0);

			// Specular BRDF
			float F90 = 1.0;
			float3 F = fresnelSchlick(F0, F90, LdotH);
			float G = V_SmithGGXCorrelated(NdotV, NdotL, roughness);
			float D = D_GGX(NdotH, roughness);
			float3 Frss = F * G * D;

			float3 Fr = Frss;

			float3 kS = F;
			float3 kD = float3(1.0, 1.0, 1.0) - kS;
			kD *= 1.0 - metallic;

			// Diffuse BRDF
			float3 Fd = DisneyDiffuse2015(NdotV, NdotL, LdotH, roughness * roughness) * albedo / PI;

			BRDF = Fd + Fr;
#else
			// Diffuse BRDF
			BRDF = albedo / PI;
#endif
			float3 Lo = BRDF * perFrameCBuffer.sun_illuminance.xyz * NdotL;

			//Lo *= 1 - SunShadowResolver(posWS);

			out_irradiance[l_surfelIndex] = float4(Lo, 1.0);
		}
	}
}
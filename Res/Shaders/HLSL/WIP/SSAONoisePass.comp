// shadertype=hlsl
#include "common/common.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

static const int sampleCount = 32;
static const float radius = 0.5f;
static const float bias = 0.05f;

[[vk::binding(0, 1)]]
Texture2D in_position : register(t0);
[[vk::binding(1, 1)]]
Texture2D in_normal : register(t1);
[[vk::binding(2, 1)]]
Texture2D in_randomRot : register(t2);
[[vk::binding(0, 2)]]
SamplerState in_samplerTypePoint : register(s0);
[[vk::binding(1, 2)]]
SamplerState in_samplerTypeWrap : register(s1);
[[vk::binding(0, 3)]]
RWTexture2D<float4> out_SSAOPassRT0 : register(u0);

[numthreads(8, 8, 1)]
void main(ComputeInputType input)
{
	float2 readCoord = (float2)input.dispatchThreadID.xy;

	// Repeat address mode
	float3 randomRot = in_randomRot.SampleLevel(in_samplerTypeWrap, readCoord, 0.0).xyz;

	// alpha channel is used previously, remove its unwanted influence
	// world space position to view space
	float4 posWS = float4(in_position[readCoord].xyz, 1.0f);
	float4 posVS = mul(posWS, perFrameCBuffer.v);

	// world space normal to view space
	float4 normalWS = float4(in_normal[readCoord].xyz, 0.0f);
	float4 normalVS = mul(normalWS, perFrameCBuffer.v);
	normalVS = normalize(normalVS);

	// create TBN change-of-basis matrix: from tangent-space to view-space
	float3 tangent = normalize(randomRot - normalVS.xyz * dot(randomRot, normalVS.xyz));
	float3 bitangent = cross(normalVS.xyz, tangent);
	float3x3 TBN = float3x3(tangent, bitangent, normalVS.xyz);

	// iterate over the sample kernel and calculate occlusion factor
	float occlusion = 0.0f;
	for (int i = 0; i < sampleCount; ++i)
	{
		// get sample position
		// from tangent to view-space
		float3 randomHemisphereSampleDir = mul(SSAOKernels[i].xyz, TBN);
		float3 randomHemisphereSamplePos = posVS.xyz + randomHemisphereSampleDir * radius;

		// project sample position (to sample texture) (to get position on screen/texture)
		float4 randomCoord = float4(randomHemisphereSamplePos, 1.0f);
		randomCoord = mul(randomCoord, perFrameCBuffer.p_jittered); // from view to clip-space
		randomCoord.xyz /= randomCoord.w; // perspective divide
		randomCoord.xyz = randomCoord.xyz * 0.5f + 0.5f; // transform to range 0.0 - 1.0

		randomCoord = saturate(randomCoord);

		// Flip y
		randomCoord.y = 1.0 - randomCoord.y;

		// get sample depth
		float4 randomFragSamplePos = in_position.SampleLevel(in_samplerTypePoint, randomCoord.xy, 0.0);

		// alpha channel is used previously, remove its unwanted influence
		randomFragSamplePos.w = 1.0f;
		randomFragSamplePos = mul(randomFragSamplePos, perFrameCBuffer.v);

		// range check & accumulate
		float rangeCheck = smoothstep(0.0, 1.0, radius / max(abs(posVS.z - randomFragSamplePos.z), eps));
		occlusion += (randomFragSamplePos.z > randomHemisphereSamplePos.z + bias ? 1.0 : 0.0) * rangeCheck;
	}

	occlusion = 1.0 - (occlusion / float(sampleCount));

	out_SSAOPassRT0[input.dispatchThreadID.xy] = float4(occlusion, occlusion, occlusion, 1.0);
}
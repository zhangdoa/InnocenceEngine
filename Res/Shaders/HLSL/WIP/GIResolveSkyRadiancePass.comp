// shadertype=hlsl
#include "common/common.hlsl"
#include "common/skyResolver.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

[[vk::binding(0, 1)]]
RWTexture3D<float4> out_skyRadiance : register(u0);

[numthreads(8, 8, 8)]
void main(ComputeInputType input)
{
	if (input.dispatchThreadID.z < 6)
	{
		float2 coordOnPlane = float2(input.dispatchThreadID.xy + float2(1.0, 1.0)) / float2(8.0, 8.0);
		coordOnPlane = coordOnPlane * 2.0 - 1.0;

		float3 eyedir;

		if (input.dispatchThreadID.z == 0)
		{
			eyedir = normalize(float3(1.0, coordOnPlane.y, coordOnPlane.x));
		}
		else if (input.dispatchThreadID.z == 1)
		{
			eyedir = normalize(float3(-1.0, coordOnPlane.y, coordOnPlane.x));
		}
		else if (input.dispatchThreadID.z == 2)
		{
			eyedir = normalize(float3(coordOnPlane.x, 1.0, coordOnPlane.y));
		}
		else if (input.dispatchThreadID.z == 3)
		{
			eyedir = normalize(float3(coordOnPlane.x, -1.0, coordOnPlane.y));
		}
		else if (input.dispatchThreadID.z == 4)
		{
			eyedir = normalize(float3(coordOnPlane, 1.0));
		}
		else if (input.dispatchThreadID.z == 5)
		{
			eyedir = normalize(float3(coordOnPlane, -1.0));
		}

		float3 color = float3(0.0, 0.0, 0.0);

		float3 lightdir = -perFrameCBuffer.sun_direction.xyz;
		float planetRadius = 6371e3;
		float atmosphereHeight = 100e3;
		float3 eye_position = float3(0.0, planetRadius, 0.0);

		color = atmosphere(
			eyedir,           // normalized ray direction
			eye_position,               // ray origin
			lightdir,                        // position of the sun
			perFrameCBuffer.sun_illuminance.xyz,                           // intensity of the sun
			planetRadius,                   // radius of the planet in meters
			planetRadius + atmosphereHeight, // radius of the atmosphere in meters
			float3(5.8e-6, 13.5e-6, 33.1e-6), // Rayleigh scattering coefficient
			21e-6,                          // Mie scattering coefficient
			8e3,                            // Rayleigh scale height
			1.3e3,                          // Mie scale height
			0.758                           // Mie preferred scattering direction
		);

		out_skyRadiance[input.dispatchThreadID] = float4(color, 1.0);
	}
}
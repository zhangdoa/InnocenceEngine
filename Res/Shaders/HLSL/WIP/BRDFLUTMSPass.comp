// shadertype=hlsl
#include "common/common.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

[[vk::binding(0, 0)]]
Texture2D in_BRDFLUT : register(t0);
[[vk::binding(0, 1)]]
RWTexture2D<float4> out_BRDFLUTMSPassRT0 : register(u0);

[numthreads(16, 16, 1)]
void main(ComputeInputType input)
{
	float averangeRsF1 = 0.0;
	float currentRsF1 = 0.0;
	const uint textureSize = 512u;

	// "Real-Time Rendering", 4th edition, pg. 346, "9.8.2 Multiple-Bounce Surface Reflection", "The function $\overline{RsF1}$ is the cosine-weighted average value of RsF1 over the hemisphere"
	for (uint i = 0u; i < textureSize; ++i)
	{
		currentRsF1 = in_BRDFLUT[int2(i, input.dispatchThreadID.y)].b;
		// cos-weighted
		float mu = float(i) / float(textureSize);
		currentRsF1 *= mu;
		averangeRsF1 += currentRsF1;
	}

	averangeRsF1 /= float(textureSize);
	averangeRsF1 *= 2;

	out_BRDFLUTMSPassRT0[input.dispatchThreadID.xy] = float4(averangeRsF1, averangeRsF1, averangeRsF1, 1.0);
}
// shadertype=hlsl
#include "common/common.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

static const float coefficients[21] = 
    {0.000272337, 0.00089296, 0.002583865, 0.00659813, 0.014869116,
     0.029570767, 0.051898313, 0.080381679, 0.109868729, 0.132526984,
     0.14107424,
     0.132526984, 0.109868729, 0.080381679, 0.051898313, 0.029570767,
     0.014869116, 0.00659813, 0.002583865, 0.00089296, 0.000272337};

[[vk::binding(0, 1)]]
Texture2DArray in_shadow : register(t0);
[[vk::binding(0, 2)]]
RWTexture2DArray<float4> out_shadow : register(u0);

[numthreads(16, 16, 1)]
void main(ComputeInputType input)
{
	float4 color = float4(0.0f, 0.0f, 0.0f, 0.0f);
	
	[unroll]
	for (int i = 0; i < 21; i++)
	{
		int3 coord = int3(input.dispatchThreadID.x, input.dispatchThreadID.y + i - 10, perFrameCBuffer.activeCascade);

		color += in_shadow[coord] * coefficients[i];
	}

	int3 writeCoord = int3(input.dispatchThreadID.xy, perFrameCBuffer.activeCascade);
	out_shadow[writeCoord] = color;
}
// shadertype=hlsl
#include "common/coneTrace.hlsl"
#define MAX_FRAG 8

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

[[vk::binding(0, 1)]]
RWTexture2D<uint> in_headPtr : register(u0);
[[vk::binding(1, 1)]]
RWStructuredBuffer<uint4> in_transparentPassRT0 : register(u1);
[[vk::binding(2, 1)]]
RWStructuredBuffer<uint4> in_transparentPassRT1 : register(u2);
[[vk::binding(3, 1)]]
RWTexture2D<float4> out_blendPassRT0 : register(u3);

uint getFragmentList(out uint4 fragmentListRT0[MAX_FRAG], out uint4 fragmentListRT1[MAX_FRAG], int2 coord)
{
	uint current = in_headPtr[coord];
	uint fragCount = 0;

	while (current != 0xFFFFFFFF && fragCount < MAX_FRAG)
	{
		uint4 itemRT0 = in_transparentPassRT0[current];
		uint4 itemRT1 = in_transparentPassRT1[current];

		current = itemRT0.x;

		fragmentListRT0[fragCount] = itemRT0;
		fragmentListRT1[fragCount] = itemRT1;

		fragCount++;
	}
	return fragCount;
}

void sortFragmentList(inout uint4 fragmentListRT0[MAX_FRAG], inout uint4 fragmentListRT1[MAX_FRAG], uint fragCount)
{
	uint i;
	uint j;
	for (i = 0; i < fragCount; i++)
	{
		for (j = i + 1; j < fragCount; j++)
		{
			float depth_i = asfloat(fragmentListRT0[i].z);
			float depth_j = asfloat(fragmentListRT0[j].z);

			if (depth_i < depth_j)
			{
				uint4 tempRT0 = fragmentListRT0[i];
				fragmentListRT0[i] = fragmentListRT0[j];
				fragmentListRT0[j] = tempRT0;

				uint4 tempRT1 = fragmentListRT1[i];
				fragmentListRT1[i] = fragmentListRT1[j];
				fragmentListRT1[j] = tempRT1;
			}
		}
	}
}

float4 blend(float4 Cb, float4 Cs, float4 Tr)
{
	return float4(Cs.a * (Cs.rgb + Tr.rgb * Cb.rgb) + (1.0 - Cs.a) * Cb.rgb, 1.0f);
}

float4 getPixelValue(in uint4 fragmentListRT0[MAX_FRAG], inout uint4 fragmentListRT1[MAX_FRAG], float4 Cb, uint fragCount)
{
	uint i;

	for (i = 0; i < fragCount; i++)
	{
		uint encodedCs = fragmentListRT0[i].y;
		float4 Cs = DecodeColor(encodedCs);
		float4 Tr = float4(asfloat(fragmentListRT1[i].x), asfloat(fragmentListRT1[i].y), asfloat(fragmentListRT1[i].z), 1.0f);
		Cs.a = asfloat(fragmentListRT1[i].w);
		Cb = blend(Cb, Cs, Tr);
	}

	return Cb;
}

static float4 heatArray[8] = {
	float4(0.0f, 0.0f, 0.5f, 1.0f),
	float4(0.0f, 0.0f, 1.0f, 1.0f),
	float4(0.0f, 1.0f, 0.5f, 1.0f),
	float4(0.0f, 1.0f, 1.0f, 1.0f),
	float4(0.0f, 0.5f, 0.0f, 1.0f),
	float4(0.0f, 1.0f, 0.0f, 1.0f),
	float4(1.0f, 1.0f, 0.0f, 1.0f),
	float4(1.0f, 0.0f, 0.0f, 1.0f)
};

[numthreads(8, 8, 1)]
void main(ComputeInputType input)
{
	int2 coord = input.dispatchThreadID.xy;

	uint4 fragmentListRT0[MAX_FRAG];
	uint4 fragmentListRT1[MAX_FRAG];

	uint fragCount = getFragmentList(fragmentListRT0, fragmentListRT1, coord);
	sortFragmentList(fragmentListRT0, fragmentListRT1, fragCount);
	out_blendPassRT0[coord] = getPixelValue(fragmentListRT0, fragmentListRT1, out_blendPassRT0[coord], fragCount);
}
// shadertype=hlsl
#include "common/common.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

[[vk::binding(0, 1)]]
RWTexture3D<float4> out_irradianceVolume : register(u0);
[[vk::binding(1, 1)]]
RWTexture3D<float4> in_materialVolume : register(u1);
[[vk::binding(0, 2)]]
Texture2DArray in_SunShadow : register(t0);
[[vk::binding(1, 2)]]
Texture2D<uint2> in_LightGrid : register(t1);
[[vk::binding(2, 2)]]
StructuredBuffer<uint> in_LightIndexList : register(t2);
[[vk::binding(0, 3)]]
SamplerState SamplerTypePoint : register(s0);

#include "common/BSDF.hlsl"
#include "common/shadowResolver.hlsl"

[numthreads(8, 8, 8)]
void main(ComputeInputType input)
{
	if (input.dispatchThreadID.x < dispatchParams[6].numThreads.x
		&& input.dispatchThreadID.y < dispatchParams[6].numThreads.y
		&& input.dispatchThreadID.z < dispatchParams[6].numThreads.z)
	{
		out_irradianceVolume[input.dispatchThreadID] = float4(0.0f, 0.0f, 0.0f, 0.0f);

		float4 Lo = float4(perFrameCBuffer.sun_illuminance.xyz, 1.0f);
		float3 l_readCoord = float3(input.dispatchThreadID) / float3(dispatchParams[6].numThreads.xyz);

		float4 eyePos = float4(l_readCoord, 1.0);
		eyePos.xyz = eyePos.xyz * 2.0 - 1.0;
		eyePos = mul(eyePos, perFrameCBuffer.p_inv);
		eyePos /= eyePos.w;
		eyePos = mul(eyePos, perFrameCBuffer.v_inv);

		//Lo *= 1.0 - SunShadowResolver(eyePos, SamplerTypePoint);

		uint2 tileIndex = uint2(floor(input.dispatchThreadID.xy * 8 / BLOCK_SIZE));

		uint startOffset = in_LightGrid[tileIndex].x;
		uint lightCount = in_LightGrid[tileIndex].y;

		[loop]
		for (uint i = 0; i < lightCount; ++i)
		{
			uint lightIndex = in_LightIndexList[startOffset + i];
			PointLight_CB light = pointLights[lightIndex];

			float3 unormalizedL = light.position.xyz - eyePos.xyz;
			float lightAttRadius = light.luminousFlux.w;

			float attenuation = 1.0;
			float invSqrAttRadius = 1.0 / max(lightAttRadius * lightAttRadius, eps);
			attenuation *= getDistanceAtt(unormalizedL, invSqrAttRadius);

			float3 luminousFlux = light.luminousFlux.xyz * attenuation;

			Lo.xyz += luminousFlux;
		}

		float4 SE = in_materialVolume[input.dispatchThreadID];
		Lo.w = SE.w;

		out_irradianceVolume[input.dispatchThreadID] = Lo;
	}
}
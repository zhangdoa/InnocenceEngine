// shadertype=hlsl
#include "common/common.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

[[vk::binding(0, 0)]]
cbuffer PerFrameConstantBuffer : register(b0)
{
    PerFrame_CB g_Frame;
}

[[vk::binding(0, 1)]]
RWStructuredBuffer<uint> in_histogram : register(u0);
[[vk::binding(1, 1)]]
RWStructuredBuffer<float> out_average : register(u1);

groupshared uint histogramShared[256];

[numthreads(16, 16, 1)]
void main(ComputeInputType input)
{
	uint countForThisBin = in_histogram.Load(input.groupIndex);
	histogramShared[input.groupIndex] = countForThisBin * input.groupIndex;

	GroupMemoryBarrierWithGroupSync();

	in_histogram[input.groupIndex] = 0;

	[unroll]
	for (uint histogramSampleIndex = (256 >> 1); histogramSampleIndex > 0; histogramSampleIndex >>= 1)
	{
		if (input.groupIndex < histogramSampleIndex)
		{
			InterlockedAdd(histogramShared[input.groupIndex], histogramShared[input.groupIndex + histogramSampleIndex]);
		}

		GroupMemoryBarrierWithGroupSync();
	}

	if (input.groupIndex == 0)
	{
		float weightedLogAverage = (histogramShared[0] / max(g_Frame.viewportSize.x * g_Frame.viewportSize.y - (float)countForThisBin, 1.0)) - 1.0;
		float range = g_Frame.maxLogLuminance - g_Frame.minLogLuminance;
		float weightedAverageLuminance = exp2(weightedLogAverage / 254.0 * range + g_Frame.minLogLuminance);
		float luminanceLastFrame = out_average[0];
		float adaptedLuminance = luminanceLastFrame + (weightedAverageLuminance - luminanceLastFrame) * 0.5;

		out_average[0] = adaptedLuminance;
	}
}
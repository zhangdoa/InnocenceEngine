// shadertype=hlsl
#include "common/common.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

[[vk::binding(0, 0)]]
cbuffer PerFrameConstantBuffer : register(b0)
{
	PerFrame_CB g_Frame;
}

[[vk::binding(1, 0)]]
cbuffer PointLightCBuffer : register(b1)
{
	PointLight_CB g_PointLights[NR_POINT_LIGHTS];
};

[[vk::binding(2, 0)]]
cbuffer PerFrameConstantBuffer : register(b2)
{
	DispatchParams_CB g_DispatchParams[NUM_DISPATCH_PARAMS];
}

[[vk::binding(0, 1)]]
RWStructuredBuffer<Frustum> in_Frustums : register(u0);
[[vk::binding(1, 1)]]
RWStructuredBuffer<uint> g_LightIndexCounter : register(u1);
[[vk::binding(2, 1)]]
RWStructuredBuffer<uint> g_LightIndexList : register(u2);
[[vk::binding(3, 1)]]
RWTexture2D<uint2> g_LightGrid : register(u3);
[[vk::binding(4, 1)]]
RWTexture2D<float4> g_DebugHeatMap : register(u4);
[[vk::binding(0, 2)]]
Texture2D g_DepthTextureViewSpace : register(t0);
[[vk::binding(0, 3)]]
SamplerState in_samplerTypePoint : register(s0);

groupshared uint l_uMinDepth;
groupshared uint l_uMaxDepth;
groupshared Frustum l_TileFrustum;
groupshared uint l_LightCount;
groupshared uint l_LightIndexStartOffset;
groupshared uint l_LightList[1024];

void AppendLight(uint lightIndex)
{
	uint index; // Index into the visible lights array.
	InterlockedAdd(l_LightCount, 1, index);
	if (index < 1024)
	{
		l_LightList[index] = lightIndex;
	}
}

[numthreads(BLOCK_SIZE, BLOCK_SIZE, 1)]
void main(ComputeInputType input)
{
	// Calculate min & max depth in thread group / tile.
	int2 texCoord = input.dispatchThreadID.xy;
	float fDepth = g_DepthTextureViewSpace.Load(int3(texCoord, 0)).r;

	uint uDepth = asuint(fDepth);

	// Initialize group local variables
	// Avoid contention by other threads in the group.
	if (input.groupIndex == 0)
	{
		l_uMinDepth = 0xffffffff;
		l_uMaxDepth = 0;
		l_LightCount = 0;
		l_LightIndexStartOffset = 0;
		l_TileFrustum = in_Frustums[input.groupID.x + (input.groupID.y * g_DispatchParams[1].numThreadGroups.x)];
	}

	GroupMemoryBarrierWithGroupSync();

	// Get min/max depth
	InterlockedMin(l_uMinDepth, uDepth);
	InterlockedMax(l_uMaxDepth, uDepth);

	GroupMemoryBarrierWithGroupSync();

	float fMinDepth = asfloat(l_uMinDepth);
	float fMaxDepth = asfloat(l_uMaxDepth);

	// Convert depth values to view space.
	float minDepthVS = ClipToView(float4(0, 0, fMinDepth, 1), g_Frame.p_inv).z;
	float maxDepthVS = ClipToView(float4(0, 0, fMaxDepth, 1), g_Frame.p_inv).z;
	float nearClipVS = ClipToView(float4(0, 0, 0, 1), g_Frame.p_inv).z;

	// Clipping plane for minimum depth value
	Plane minPlane = { float3(0, 0, -1), -minDepthVS };

	// Cull point light
	uint i = 0u;
	for (i = input.groupIndex; i < NR_POINT_LIGHTS; i += BLOCK_SIZE * BLOCK_SIZE)
	{
		PointLight_CB light = g_PointLights[i];
		// w component of luminousFlux is the attenuation radius
		if (light.luminousFlux.w > 0.0f)
		{
			float4 lightPos_VS = mul(light.position, g_Frame.v);
			Sphere sphere = { lightPos_VS.xyz, light.luminousFlux.w };
			if (SphereInsideFrustum(sphere, l_TileFrustum, nearClipVS, maxDepthVS))
			{
				if (!SphereInsidePlane(sphere, minPlane))
				{
					AppendLight(i);
				}
			}
		}
	}

	GroupMemoryBarrierWithGroupSync();

	// Only local thread 0 could write to the global light index counter and light grid
	if (input.groupIndex == 0)
	{
		InterlockedAdd(g_LightIndexCounter[0], l_LightCount, l_LightIndexStartOffset);
		g_LightGrid[input.groupID.xy] = uint2(l_LightIndexStartOffset, l_LightCount);
	}

	GroupMemoryBarrierWithGroupSync();

	// Write to global light index list
	for (i = input.groupIndex; i < l_LightCount; i += BLOCK_SIZE * BLOCK_SIZE)
	{
		g_LightIndexList[l_LightIndexStartOffset + i] = l_LightList[i];
	}

	// Write to debug heat map texture
	g_DebugHeatMap[texCoord] = float4(0, 0, 0, 0);

	if (input.groupThreadID.x == 0 || input.groupThreadID.y == 0)
	{
		g_DebugHeatMap[texCoord] = float4(0, 0, 0, 0.9f);
	}
	else if (input.groupThreadID.x == 1 || input.groupThreadID.y == 1)
	{
		g_DebugHeatMap[texCoord] = float4(1, 1, 1, 0.5f);
	}
	else if (l_LightCount > 0)
	{
		float4 heat;

		if (l_LightCount >= 16)
		{
			heat = debugColors[15];
		}
		else
		{
			heat = debugColors[l_LightCount - 1];
		}
		g_DebugHeatMap[texCoord] = heat;
	}
	else
	{
		g_DebugHeatMap[texCoord] = float4(0, 0, 0, 1);
	}
}
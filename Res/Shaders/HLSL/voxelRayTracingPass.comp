// shadertype=hlsl
#include "common/coneTrace.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

[[vk::binding(0, 1)]]
Texture3D<float4> in_luminanceVolume : register(t0);
[[vk::binding(1, 1)]]
Texture3D<float4> in_normalVolume : register(t1);
[[vk::binding(0, 2)]]
RWTexture3D<float4> out_luminanceVolume : register(u0);
[[vk::binding(1, 2)]]
RWStructuredBuffer<float4> in_ray : register(u1);
[[vk::binding(2, 2)]]
RWStructuredBuffer<uint4> in_probeIndex : register(u2);
[[vk::binding(0, 3)]]
SamplerState in_samplerTypePoint : register(s0);

groupshared float4 result;
groupshared uint3 probeIndex;
groupshared float3 texCoord_orig;

[numthreads(4, 4, 4)]
void main(ComputeInputType input)
{
	if (input.groupIndex == 0)
	{
		uint flattenIndex = input.groupID.x + input.groupID.y * 8 + input.groupID.z * 8 * 8;
		probeIndex = in_probeIndex[flattenIndex].xyz;
		texCoord_orig = float3(probeIndex) / voxelizationPassCBuffer.volumeResolution;

		//texCoord_orig *= (voxelizationPassCBuffer.volumeExtend / 2.0);
		//texCoord_orig += voxelizationPassCBuffer.volumeCenter.xyz;
		//texCoord_orig += normal * voxelizationPassCBuffer.voxelSize * SQRT2;

		result = float4(0.0f, 0.0f, 0.0f, 1.0f);

		out_luminanceVolume[probeIndex] = float4(0.0f, 0.0f, 0.0f, 0.0f);
	}

	GroupMemoryBarrierWithGroupSync();

	float maxDist = voxelizationPassCBuffer.volumeResolution / 2.0f;

	bool sampled = false;
	float dist = 1.0f;
	float4 ray = in_ray[input.groupIndex];
	ray *= voxelizationPassCBuffer.volumeResolutionRcp;

	while (!sampled && (dist < maxDist))
	{
		float3 texCoord = texCoord_orig + ray.xyz * dist;

		int is_saturated = (texCoord.x > 1.0) || (texCoord.y > 1.0) || (texCoord.z > 1.0);

		if (!is_saturated)
		{
			float4 sample = in_luminanceVolume.SampleLevel(in_samplerTypePoint, texCoord, 0);

			if (sample.a)
			{
				result.xyz += sample.xyz / (dist * dist);
				sampled = true;
				break;
			}
		}

		dist += 1.0f;
	}

	GroupMemoryBarrierWithGroupSync();

	if (input.groupIndex == 0)
	{
		out_luminanceVolume[probeIndex] = result / 64.0f;
	}
}
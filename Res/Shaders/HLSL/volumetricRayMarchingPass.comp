// shadertype=hlsl
#include "common/common.hlsl"
#define MIN_SIGMA 0.00002

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

#include "common/skyResolver.hlsl"

[[vk::binding(0, 1)]]
Texture3D<float4> in_irradianceVolume : register(t0);
[[vk::binding(1, 1)]]
Texture3D<float4> in_materialVolume : register(t1);
[[vk::binding(2, 1)]]
Texture3D<float4> in_motionVectorVolume : register(t2);
[[vk::binding(3, 1)]]
Texture3D<float4> in_integrationResult_history : register(t3);
[[vk::binding(0, 2)]]
RWTexture3D<float4> out_integrationResult : register(u0);
[[vk::binding(0, 3)]]
SamplerState SamplerTypeLinear : register(s0);

[numthreads(8, 8, 8)]
void main(ComputeInputType input)
{
	if (input.dispatchThreadID.x < dispatchParams[7].numThreads.x
		&& input.dispatchThreadID.y < dispatchParams[7].numThreads.y
		&& input.dispatchThreadID.z < dispatchParams[7].numThreads.z)
	{
		float3 sunPos = normalize(-perFrameCBuffer.sun_direction.xyz);

		float3 sigmaS = float3(0.0, 0.0, 0.0);
		float3 sigmaE = float3(0.0, 0.0, 0.0);
		float pMie = 0.0;

		float3 transmittance = float3(1.0, 1.0, 1.0);
		float3 scatteredLight = float3(0.0, 0.0, 0.0);

		// Mie scattering phases
		float cosTheta = -sunPos.z;

		float4 Lo = float4(0.0f, 0.0f, 0.0f, 1.0f);

		for (int i = 0; i < 64; i++)
		{
			float dd1 = float(i) / float(64);
			dd1 = 1.0 - exp(-dd1 * 8);
			float dd2 = float(i + 1) / float(64);
			dd2 = 1.0 - exp(-dd2 * 8);
			float dd = dd2 - dd1;
			dd *= (perFrameCBuffer.zFar - perFrameCBuffer.zNear);

			int3 p = int3(input.dispatchThreadID.xy, i);

			float4 Lscat = in_irradianceVolume[p];

			if (Lscat.w)
			{
				sigmaS = in_materialVolume[p].xyz;
				pMie = mie_Schlick(cosTheta, in_materialVolume[p].w);
				sigmaE = float3(Lscat.w, Lscat.w, Lscat.w);
			}
			sigmaS = max(sigmaS, MIN_SIGMA);
			sigmaE = max(sigmaE, MIN_SIGMA);
			pMie = max(pMie, eps);

			float3 S = Lscat.xyz * sigmaS * pMie;
			float3 Sint = (S - S * exp(-sigmaE * dd)) / sigmaE;
			scatteredLight += transmittance * Sint;

			transmittance *= exp(-sigmaE * dd);

			Lo.rgb += scatteredLight;
			Lo.a *= transmittance;

			float3 motionVector = in_motionVectorVolume[p].xyz;
			float3 coordHistory = float3(p);
			coordHistory.xy /= float2(dispatchParams[7].numThreads.xy);
			coordHistory.z /= 64.0f;
			coordHistory -= motionVector;

			float4 Lo_History = in_integrationResult_history.SampleLevel(SamplerTypeLinear, coordHistory, 0);

			//out_integrationResult[p] = lerp(Lo_History, Lo, 0.05);
			out_integrationResult[p] = Lo;
		}
	}
}
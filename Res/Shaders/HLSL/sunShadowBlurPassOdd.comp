// shadertype=hlsl
#include "common/common.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

static const float2 gaussFilter[7] =
{
	-3.0,	0.015625,
	-2.0,	0.09375,
	-1.0,	0.234375,
	0.0,	0.3125,
	1.0,	0.234375,
	2.0,	0.09375,
	3.0,	0.015625
};

[[vk::binding(0, 1)]]
Texture2DArray in_shadow : register(t0);
[[vk::binding(0, 2)]]
RWTexture2DArray<float4> out_shadow : register(u0);

[numthreads(16, 16, 4)]
void main(ComputeInputType input)
{
	float4 color = float4(0.0f, 0.0f, 0.0f, 0.0f);

	[unroll]
	for (int i = 0; i < 7; i++)
	{
		float2 offset = float2(gaussFilter[i].x, gaussFilter[i].x);
		int3 coord = int3(input.dispatchThreadID.xy + offset, input.dispatchThreadID.z);

		color += in_shadow[coord] * gaussFilter[i].y;
	}

	out_shadow[input.dispatchThreadID.xyz] = color;
}
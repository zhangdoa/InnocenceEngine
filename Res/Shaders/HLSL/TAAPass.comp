// shadertype=hlsl
#include "common/common.hlsl"
#define Use_YCoCg 0

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;
	uint3 groupThreadID : SV_GroupThreadID;
	uint3 dispatchThreadID : SV_DispatchThreadID;
	uint groupIndex : SV_GroupIndex;
};

[[vk::binding(0, 0)]]
cbuffer PerFrameConstantBuffer : register(b0)
{
	PerFrame_CB g_Frame;
}

[[vk::binding(0, 1)]]
Texture2D in_current : register(t0);
[[vk::binding(1, 1)]]
Texture2D in_history : register(t1);
[[vk::binding(2, 1)]]
Texture2D in_motionVector : register(t2);
[[vk::binding(0, 2)]]
RWTexture2D<float4> TAAPassRT0 : register(u0);

// Adjustable TAA Parameters
static const float MOTION_VECTOR_CLAMP = 20.0;     // Clamping motion to avoid extreme artifacts
static const float MOTION_VECTOR_SCALE = 0.95;    // Dampens excessive motion
static const float ADAPTIVE_CLAMP_MIN = 0.1;      // Min soft clamping factor
static const float ADAPTIVE_CLAMP_MAX = 0.3;      // Max soft clamping factor
static const float LUMA_DIFF_THRESHOLD_MIN = 0.05;// Min luminance difference rejection
static const float LUMA_DIFF_THRESHOLD_MAX = 0.25;// Max luminance difference rejection
static const float HISTORY_BLEND_MIN = 0.05;      // Minimum blending weight
static const float HISTORY_BLEND_MAX = 0.15;      // Maximum blending weight
static const float MOTION_REJECTION_SCALE = 3.0;  // History rejection scale for fast motion
static const float HISTORY_SOFT_REJECT_THRESHOLD = 0.3; // Soft rejection factor for history blending

[numthreads(8, 8, 1)]
void main(ComputeInputType input)
{
	int2 pixelPos = input.dispatchThreadID.xy;

	// Read motion vector (already in screen space)
	float2 motionVector = in_motionVector[pixelPos].xy;

	// Clamp extreme motion vectors
	motionVector = clamp(motionVector, -MOTION_VECTOR_CLAMP, MOTION_VECTOR_CLAMP);
	motionVector *= MOTION_VECTOR_SCALE;

	// Load current color
	float3 currentColor = in_current[pixelPos].rgb;

	// Compute history sample position (motion-reprojected)
	int2 historyTexCoords = pixelPos + round(motionVector);
    bool withinBounds = all(historyTexCoords >= float2(0, 0)) && all(historyTexCoords <= g_Frame.viewportSize.xy);
    if (!withinBounds)
	{
		TAAPassRT0[pixelPos] = float4(currentColor, 1.0);
		return;
	}

	// Load history color
	float3 historyColor = in_history[historyTexCoords].rgb;

	// Compute Luminance
	float lumaCurrentColor = GetLuma(currentColor);
	float lumaHistoryColor = GetLuma(historyColor);

	// Compute Min/Max Neighborhood Color
	float3 maxNeighbor = float3(FLT_MIN, FLT_MIN, FLT_MIN);
	float3 minNeighbor = float3(FLT_MAX, FLT_MAX, FLT_MAX);
	float3 neighborSum = float3(0.0, 0.0, 0.0);

	for (int x = -1; x <= 1; x++)
	{
		for (int y = -1; y <= 1; y++)
		{
			int2 neighborTexCoords = pixelPos + int2(x, y);
			float3 neighborColor = in_current[neighborTexCoords].rgb;

			maxNeighbor = max(maxNeighbor, neighborColor);
			minNeighbor = min(minNeighbor, neighborColor);
			neighborSum += neighborColor;
		}
	}

	float3 neighborAverage = neighborSum / 9.0;

	// Motion intensity rejection
	float motionIntensity = length(motionVector / g_Frame.viewportSize.xy);
	float historyRejectFactor = saturate(motionIntensity * MOTION_REJECTION_SCALE);

	// Adaptive Soft Clamping
	float adaptiveClampFactor = saturate(1.0 - motionIntensity * ADAPTIVE_CLAMP_MAX);
	float3 historyClamped = lerp(historyColor, clamp(historyColor, minNeighbor, maxNeighbor), adaptiveClampFactor);

	// Compute Adaptive Blending Weight
	float unbiased_diff = abs(lumaCurrentColor - lumaHistoryColor) / max(lumaCurrentColor, max(lumaHistoryColor, 0.2));
	float unbiased_weight = 1.0 - unbiased_diff;
	float unbiased_weight_sqr = unbiased_weight * unbiased_weight;

	float adaptiveWeight = lerp(HISTORY_BLEND_MIN, HISTORY_BLEND_MAX, unbiased_weight_sqr);

	// Luminance Difference Soft Rejection
	float lumaDiff = abs(lumaCurrentColor - lumaHistoryColor);
	float historyBlendFactor = saturate(1.0 - smoothstep(LUMA_DIFF_THRESHOLD_MIN, LUMA_DIFF_THRESHOLD_MAX, lumaDiff));

	// Final Blending
	float3 finalColor = lerp(historyClamped, currentColor, adaptiveWeight + historyRejectFactor * historyBlendFactor);

#if Use_YCoCg
	finalColor = YCoCg_RGB(finalColor);
#endif

	TAAPassRT0[pixelPos] = float4(finalColor, lumaCurrentColor);
}

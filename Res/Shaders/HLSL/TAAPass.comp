// shadertype=hlsl
#include "common/common.hlsl"
#define Use_YCoCg 0

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

[[vk::binding(0, 0)]]
cbuffer PerFrameConstantBuffer : register(b0)
{
	PerFrame_CB g_Frame; // Contains view, projection, and other per-frame matrices.
}

[[vk::binding(0, 1)]]
Texture2D in_current : register(t0);
[[vk::binding(1, 1)]]
Texture2D in_history : register(t1);
[[vk::binding(2, 1)]]
Texture2D in_motionVector : register(t2);
[[vk::binding(0, 2)]]
RWTexture2D<float4> TAAPassRT0 : register(u0);

[numthreads(8, 8, 1)]
void main(ComputeInputType input)
{
	float2 MotionVector = in_motionVector[input.dispatchThreadID.xy].xy;
	int2 historyTexCoords = input.dispatchThreadID.xy - MotionVector * g_Frame.viewportSize.xy;

	float3 historyColor = in_history[input.dispatchThreadID.xy].rgb;
	float3 currentColor = in_current[input.dispatchThreadID.xy].rgb;
	bool3 hasNan = isnan(currentColor);
	if(hasNan.x || hasNan.y || hasNan.z)
	{
		currentColor = historyColor;
	}

	float lumaCurrentColor = GetLuma(currentColor);
	float lumaHistoryColor = GetLuma(historyColor);

	float3 maxNeighbor = float3(FLT_MIN, FLT_MIN, FLT_MIN);
	float3 minNeighbor = float3(FLT_MAX, FLT_MAX, FLT_MAX);

	float3 neighborSum = float3(0.0, 0.0, 0.0);

	for (int x = -1; x <= 1; x++)
	{
		for (int y = -1; y <= 1; y++)
		{
			int2 neighborTexCoords = input.dispatchThreadID.xy + int2(x, y);

			float3 neighborColor = in_current[neighborTexCoords].rgb;

			maxNeighbor = max(maxNeighbor, neighborColor);
			minNeighbor = min(minNeighbor, neighborColor);
			neighborSum += neighborColor.rgb;
		}
	}

	float3 neighborAverage = neighborSum / 9.0;

#if Use_YCoCg
	// Clamp history color's chroma in YCoCg space
	currentColor = RGB_YCoCg(currentColor);
	historyColor = RGB_YCoCg(historyColor);
	maxNeighbor = RGB_YCoCg(maxNeighbor);
	minNeighbor = RGB_YCoCg(minNeighbor);
	neighborAverage = RGB_YCoCg(neighborAverage);

	float chroma_extent_element = 0.25 * 0.5 * (maxNeighbor.x - minNeighbor.x);
	float2 chroma_extent = float2(chroma_extent_element, chroma_extent_element);
	float2 chroma_center = currentColor.yz;
	minNeighbor.yz = chroma_center - chroma_extent;
	maxNeighbor.yz = chroma_center + chroma_extent;
	neighborAverage.yz = chroma_center;

	float lumaCurrentColor = currentColor.x;
	float lumaHistoryColor = historyColor.x;
#else
#endif

	historyColor = clamp(historyColor, minNeighbor, maxNeighbor);

	// Mix by dynamic weight
	float unbiased_diff = abs(lumaCurrentColor - lumaHistoryColor) / max(lumaCurrentColor, max(lumaHistoryColor, 0.2));
	float unbiased_weight = 1.0 - unbiased_diff;
	float unbiased_weight_sqr = unbiased_weight * unbiased_weight;
	float weight = lerp(0.01, 0.05, unbiased_weight_sqr);
	float3 finalColor = lerp(historyColor, currentColor, weight);

#if Use_YCoCg
	// Return to RGB space
	finalColor = YCoCg_RGB(finalColor);
#endif

	TAAPassRT0[input.dispatchThreadID.xy] = float4(finalColor, lumaCurrentColor);
}
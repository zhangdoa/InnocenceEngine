// shadertype=hlsl
#include "common/common.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;
	uint3 groupThreadID : SV_GroupThreadID;
	uint3 dispatchThreadID : SV_DispatchThreadID;
};

#define RGB_TO_LUM float3(0.2125, 0.7154, 0.0721)

[[vk::binding(0, 0)]]
cbuffer PerFrameConstantBuffer : register(b0)
{
	PerFrame_CB g_Frame;
}

[[vk::binding(0, 1)]]
Texture2D<float4> in_Luminance : register(t0);

[[vk::binding(0, 2)]]
RWStructuredBuffer<uint> out_Histogram : register(u0);

// Each thread group computes a local histogram in shared memory.
groupshared uint sharedHistogram[256];

uint ComputeBinIndex(float3 hdrColor, float minLogLum, float invLogLumRange)
{
	float lum = dot(hdrColor, RGB_TO_LUM);
	if (lum < EPSILON)
		return 0;

	float logLum = saturate((log2(lum) - minLogLum) * invLogLumRange);
	return uint(logLum * 254.0 + 1.0);
}

[numthreads(16, 16, 1)]
void main(ComputeInputType input)
{
	// Use one thread per group to clear the shared histogram.
	if (input.groupThreadID.x == 0 && input.groupThreadID.y == 0)
	{
		[unroll]
		for (uint i = 0; i < 256; i++)
		{
			sharedHistogram[i] = 0;
		}
	}
	GroupMemoryBarrierWithGroupSync();

	// Fetch texture dimensions (each thread can do this; alternatively, precompute and pass via a constant buffer)
	float2 texSizeF;
	float mipLevel;
	in_Luminance.GetDimensions(0, texSizeF.x, texSizeF.y, mipLevel);
	uint2 texSize = uint2(texSizeF);

	// Each thread processes one pixel (assuming dispatch covers the image).
	uint2 pixelCoord = input.dispatchThreadID.xy;
	if (pixelCoord.x < texSize.x && pixelCoord.y < texSize.y)
	{
		float3 hdrColor = in_Luminance[int2(pixelCoord)].rgb;
		uint bin = ComputeBinIndex(hdrColor, g_Frame.minLogLuminance, 1.0 / (g_Frame.maxLogLuminance - g_Frame.minLogLuminance));
		// Atomically update the local (shared) histogram.
		InterlockedAdd(sharedHistogram[bin], 1);
	}
	GroupMemoryBarrierWithGroupSync();

	// One thread per group writes the group's histogram into the global histogram.
	if (input.groupThreadID.x == 0 && input.groupThreadID.y == 0)
	{
		[unroll]
		for (uint i = 0; i < 256; i++)
		{
			// Use atomic add to accumulate contributions from all groups.
			InterlockedAdd(out_Histogram[i], sharedHistogram[i]);
		}
	}
}
